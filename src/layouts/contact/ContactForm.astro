---
import { ChevronRight } from "@lucide/astro";
---

<div>
  <form method="POST" id="contact-form" class="space-y-4">
    <div>
      <label for="name" class="block text-color text-sm mb-1">Name</label>
      <input
        name="name"
        id="name"
        type="text"
        class="w-full px-3 py-2 bg-card border border-input text-color rounded-md focus:outline-none focus:border-input focus:border-input"
      />
      <p class="text-xs text-color-primary hidden" data-error-for="name">
        Name is required.
      </p>
    </div>
    <div>
      <label for="company" class="block text-color text-sm mb-1">Company</label>
      <input
        name="company"
        id="company"
        type="text"
        class="w-full px-3 py-2 bg-card border border-input text-color rounded-md focus:outline-none focus:border-input focus:border-input"
      />
      <p class="text-xs text-color-primary hidden" data-error-for="company">
        Message is required.
      </p>
    </div>
    <div>
      <label for="email" class="block text-color text-sm mb-1">Email</label>
      <input
        name="email"
        id="email"
        type="email"
        class="w-full px-3 py-2 bg-card border border-input text-color rounded-md focus:outline-none focus:border-input focus:border-input"
      />
      <p class="text-xs text-color-primary hidden" data-error-for="email">
        Message is required.
      </p>
    </div>
    <div>
      <label for="message" class="block text-color text-sm mb-1">Message</label>
      <textarea
        name="message"
        id="message"
        rows="5"
        class="w-full px-3 py-2 bg-card border border-input text-color rounded-md resize-none focus:outline-none focus:border-input focus:border-input"
      ></textarea>
      <p class="text-xs text-color-primary hidden" data-error-for="message">
        Message is required.
      </p>
    </div>

    <button
      id="submit-btn"
      type="submit"
      class="text-sm font-semibold px-4 py-2 rounded-full bg-primary text-invert-primary inline-flex items-center gap-2 whitespace-nowrap cursor-pointer hover:bg-brand-300 !transition-colors !duration-300"
    >
      <span
        class="inline-flex items-center gap-2 whitespace-nowrap default-text"
      >
        Send <ChevronRight size={18} class="hidden lg:block" />
      </span>
      <span class="loading-text hidden">Sending...</span>
    </button>
  </form>
</div>

<script>
  import { actions } from "astro:actions";

  document.addEventListener("astro:page-load", () => {
    const form = document.getElementById("contact-form");
    const button = document.getElementById("submit-btn");
    const loadingText = button.querySelector(".loading-text");
    const defaultText = button.querySelector(".default-text");
    const toastContainer = document.getElementById("toast-container");
    const toastIcons = {
      success: document.getElementById("toast-icon-success").innerHTML,
      error: document.getElementById("toast-icon-error").innerHTML,
    };

    function showToast(message, type = "success") {
      const toast = document.createElement("div");

      toast.className = `
        flex items-center gap-3 px-4 py-3 rounded-lg border shadow-lg w-full max-w-sm
        ${
          type === "success"
            ? "bg-card border-brand-400 text-color-primary"
            : "bg-card border-color-fail text-color-primary"
        }
        animate-slide-in
      `;

      toast.innerHTML = `
        <div class="icon w-5 h-5 shrink-0">${toastIcons[type]}</div>
        <span class="flex-1 text-sm font-medium">${message}</span>
      `;
      toastContainer.appendChild(toast);
      setTimeout(() => {
        toast.classList.add("opacity-0", "translate-y-2");
        setTimeout(() => toast.remove(), 300);
      }, 5000);
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      let valid = true;

      ["name", "company", "email", "message"].forEach((fieldName) => {
        const input = form.querySelector(`[name="${fieldName}"]`);
        const error = form.querySelector(`[data-error-for="${fieldName}"]`);
        if (!input.value.trim()) {
          error.classList.remove("hidden");
          valid = false;
        } else {
          error.classList.add("hidden");
        }
      });

      if (!valid) {
        return;
      }

      button.disabled = true;
      defaultText.classList.add("!hidden");
      loadingText.classList.remove("hidden");

      try {
        const { data, error } = await actions.send(new FormData(form));

        if (!data) {
          throw new Error("Request failed");
        }

        showToast("Message sent! We'll be in touch.", "success");
        form.reset();
      } catch (err) {
        console.error(err);
        showToast("Something went wrong. Please try again.", "error");
      } finally {
        button.disabled = false;
        defaultText.classList.remove("!hidden");
        loadingText.classList.add("hidden");
      }
    });
  });
</script>
