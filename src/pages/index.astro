---
import BaseLayout from "../layouts/BaseLayout.astro";
import MainSection from "../layouts/homepage/MainSection.astro";
import FeatureSection from "../layouts/homepage/FeatureSection.astro";
import ComplianceSection from "../layouts/homepage/ComplianceSection.astro";
import MissionSection from "../layouts/homepage/MissionSection.astro";
import PartnersSection from "../layouts/homepage/PartnersSection.astro";
import TestimonialSection from "../layouts/homepage/TestimonialSection.astro";
import LabirintSection from "../layouts/homepage/LabirintSection.astro";
---

<BaseLayout>
  <MainSection />
  <LabirintSection />
  <FeatureSection />
  <ComplianceSection />

  <!-- <div id="marquee-wrapper" class="overflow-hidden w-full bg-infinite py-4">
    <div id="marquee-track" class="flex whitespace-nowrap w-max">
      <div class="marquee-content flex gap-12 text-xl font-normal px-4">
        <p>ðŸ˜µ Complex</p>
        <p>ðŸ«¨ Opaque</p>
        <p>ðŸ¤¢ Narrow</p>
        <p>ðŸ˜¦ Expensive</p>
      </div>
    </div>
  </div> -->

  <MissionSection />
  <PartnersSection />
  <!--<TestimonialSection />-->

  <Fragment slot="scripts">
    <script>
      import { gsap } from "gsap";
      import { ScrollTrigger } from "gsap/ScrollTrigger";

      document.addEventListener("astro:page-load", () => {
        /*const wrapper = document.getElementById("marquee-wrapper");
        const track = document.getElementById("marquee-track");
        if (!wrapper) {
          return;
        }
        const content = track.querySelector(".marquee-content");

        let totalWidth = content.offsetWidth;
        const wrapperWidth = wrapper.offsetWidth;

        while (totalWidth < wrapperWidth * 2) {
          const clone = content.cloneNode(true);
          track.appendChild(clone);
          totalWidth += clone.offsetWidth;
        }

        gsap.to(track, {
          x: `-=${content.offsetWidth}`,
          duration: 20,
          ease: "none",
          repeat: -1,
          modifiers: {
            x: (x) => `${parseFloat(x) % content.offsetWidth}px`,
          },
        });*/

        if (window.innerWidth < 768) {
          return;
        }

        gsap.registerPlugin(ScrollTrigger);

        const introElements = document.querySelectorAll(
          ".intro-printer, .intro-label, .intro-title, .intro-text, .intro-cta",
        );

        if (introElements.length > 0) {
          gsap.set(introElements, { opacity: 0, y: 30 });
          gsap
            .timeline({
              defaults: { duration: 0.8, ease: "power2.out" },
              scrollTrigger: {
                trigger: ".labirint-section",
                start: "top 80%",
                toggleActions: "play none none none",
              },
            })
            .to(introElements, {
              opacity: 1,
              y: 0,
              stagger: 0.15,
            });
        }

        const complianceElements = document.querySelectorAll(
          ".compliance-label, .compliance-title, .compliance-text, .compliance-subtitle, .card-gsap",
        );

        if (complianceElements.length > 0) {
          gsap.set(complianceElements, { opacity: 0, y: 30 });
          gsap
            .timeline({
              defaults: { duration: 0.8, ease: "power2.out" },
              scrollTrigger: {
                trigger: ".compliance-section",
                start: "top 80%",
                toggleActions: "play none none none",
              },
            })
            .to(complianceElements, {
              opacity: 1,
              y: 0,
              stagger: 0.15,
            });
        }

        const missionElements = document.querySelectorAll(
          ".mission-label, .mission-heading, .mission-card, .mission-cta",
        );

        if (missionElements.length > 0) {
          gsap.set(missionElements, { opacity: 0, y: 30 });
          gsap
            .timeline({
              defaults: { duration: 0.8, ease: "power2.out" },
              scrollTrigger: {
                trigger: ".mission-section",
                start: "top 80%",
                toggleActions: "play none none none",
              },
            })
            .to(missionElements, {
              opacity: 1,
              y: 0,
              stagger: 0.15,
            });
        }

        const section = document.getElementById("compliance-section");
        if (section) {
          const cards = section?.querySelectorAll(".bg-color-card") ?? [];

          cards.forEach((card) => {
            card.addEventListener("mouseenter", () => {
              gsap.to(card, {
                scale: 1.04,
                duration: 0.3,
                ease: "power2.out",
              });
            });
            card.addEventListener("mouseleave", () => {
              gsap.to(card, {
                scale: 1,
                duration: 0.3,
                ease: "power2.out",
              });
            });

            const icon = card.querySelector("svg");
            if (icon) {
              gsap.to(icon, {
                y: -10,
                duration: 2,
                repeat: -1,
                yoyo: true,
                ease: "sine.inOut",
              });
            }
          });
        }

        const missionSection = document.getElementById("mission-section");
        if (missionSection) {
          const missionCards =
            missionSection?.querySelectorAll(".mission-card") ?? [];

          missionCards.forEach((card) => {
            card.addEventListener("mouseenter", () => {
              gsap.to(card, {
                scale: 1.04,
                duration: 0.3,
                ease: "power2.out",
              });
            });
            card.addEventListener("mouseleave", () => {
              gsap.to(card, {
                scale: 1,
                duration: 0.3,
                ease: "power2.out",
              });
            });

            const icon = card.querySelector("svg");
            if (icon) {
              gsap.to(icon, {
                y: -10,
                duration: 2,
                repeat: -1,
                yoyo: true,
                ease: "sine.inOut",
              });
            }
          });
        }

        const elements = document.querySelectorAll("[data-gsap]");
        if (elements.length > 0) {
          gsap.set(elements, { opacity: 0, y: 30 });

          gsap
            .timeline({ defaults: { duration: 0.8, ease: "power2.out" } })
            .to(elements, {
              opacity: 1,
              y: 0,
              stagger: 0.15,
            });
        }

        const ctas = document.querySelectorAll(
          'a[href^="https://getopenlane.io"], a[href^="https://docs.theopenlane.io"]',
        );
        ctas.forEach((cta) => {
          cta.addEventListener("mouseenter", () => {
            gsap.to(cta, { scale: 1.05, duration: 0.3, ease: "power1.out" });
          });
          cta.addEventListener("mouseleave", () => {
            gsap.to(cta, { scale: 1, duration: 0.3, ease: "power1.out" });
          });
        });
      });
    </script>

    <script
      defer
      src="https://api.pirsch.io/pa.js"
      id="pianjs"
      data-code={import.meta.env.PIRSCH_KEY}></script>
  </Fragment>
</BaseLayout>
