---
import BaseLayout from "../layouts/BaseLayout.astro";
import MainSection from "../layouts/homepage/MainSection.astro";
import FeatureSection from "../layouts/homepage/FeatureSection.astro";
import ComplianceSection from "../layouts/homepage/ComplianceSection.astro";
import MissionSection from "../layouts/homepage/MissionSection.astro";
import PartnersSection from "../layouts/homepage/PartnersSection.astro";
import TestimonialSection from "../layouts/homepage/TestimonialSection.astro";
import LabirintSection from "../layouts/homepage/LabirintSection.astro";
import BubblesSection from "../layouts/homepage/BubblesSection.astro";
---

<BaseLayout>
  <MainSection />
  <LabirintSection />
  <FeatureSection />
  <ComplianceSection />
  <MissionSection />

  <PartnersSection />
  <!--<TestimonialSection />-->

  <Fragment slot="scripts">
    <script>
      import { gsap } from "gsap";
      import { ScrollTrigger } from "gsap/ScrollTrigger";

      document.addEventListener("astro:page-load", () => {
        /*const wrapper = document.getElementById("marquee-wrapper");
        const track = document.getElementById("marquee-track");
        if (!wrapper) {
          return;
        }
        const content = track.querySelector(".marquee-content");

        let totalWidth = content.offsetWidth;
        const wrapperWidth = wrapper.offsetWidth;

        while (totalWidth < wrapperWidth * 2) {
          const clone = content.cloneNode(true);
          track.appendChild(clone);
          totalWidth += clone.offsetWidth;
        }

        gsap.to(track, {
          x: `-=${content.offsetWidth}`,
          duration: 20,
          ease: "none",
          repeat: -1,
          modifiers: {
            x: (x) => `${parseFloat(x) % content.offsetWidth}px`,
          },
        });*/

        if (window.innerWidth < 768) {
          return;
        }

        gsap.registerPlugin(ScrollTrigger);

        gsap.from(
          [
            ".intro-printer",
            ".intro-label",
            ".intro-title",
            ".intro-text",
            ".intro-cta",
          ],
          {
            opacity: 0,
            y: 40,
            duration: 0.6,
            stagger: 0.2,
            ease: "power2.out",
            scrollTrigger: {
              trigger: ".labirint-section",
              toggleActions: "restart none none none",
            },
          },
        );

        gsap.from(
          [
            ".compliance-label",
            ".compliance-title",
            ".compliance-text",
            ".compliance-subtitle",
            ".card-gsap",
          ],
          {
            opacity: 0,
            y: 40,
            duration: 0.6,
            stagger: 0.2,
            ease: "power2.out",
            scrollTrigger: {
              trigger: ".compliance-section",
              toggleActions: "restart none none none",
            },
          },
        );

        gsap.from(
          [
            ".mission-label",
            ".mission-heading",
            ".mission-card",
            ".mission-cta",
          ],
          {
            opacity: 0,
            y: 40,
            duration: 0.6,
            stagger: 0.2,
            ease: "power2.out",
            scrollTrigger: {
              trigger: ".mission-section",
              toggleActions: "restart none none none",
            },
          },
        );

        const section = document.getElementById("compliance-section");
        const cards = section?.querySelectorAll(".bg-color-card") ?? [];

        cards.forEach((card) => {
          card.addEventListener("mouseenter", () => {
            gsap.to(card, {
              scale: 1.04,
              duration: 0.3,
              ease: "power2.out",
            });
          });
          card.addEventListener("mouseleave", () => {
            gsap.to(card, {
              scale: 1,
              duration: 0.3,
              ease: "power2.out",
            });
          });

          const icon = card.querySelector("svg");
          if (icon) {
            gsap.to(icon, {
              y: -10,
              duration: 2,
              repeat: -1,
              yoyo: true,
              ease: "sine.inOut",
            });
          }
        });

        const missionSection = document.getElementById("mission-section");
        const missionCards =
          missionSection?.querySelectorAll(".mission-card") ?? [];

        missionCards.forEach((card) => {
          card.addEventListener("mouseenter", () => {
            gsap.to(card, {
              scale: 1.04,
              duration: 0.3,
              ease: "power2.out",
            });
          });
          card.addEventListener("mouseleave", () => {
            gsap.to(card, {
              scale: 1,
              duration: 0.3,
              ease: "power2.out",
            });
          });

          const icon = card.querySelector("svg");
          if (icon) {
            gsap.to(icon, {
              y: -10,
              duration: 2,
              repeat: -1,
              yoyo: true,
              ease: "sine.inOut",
            });
          }
        });

        const elements = document.querySelectorAll("[data-gsap]");

        gsap.set(elements, { opacity: 0, y: 30 });

        gsap
          .timeline({ defaults: { duration: 0.8, ease: "power2.out" } })
          .to(elements, {
            opacity: 1,
            y: 0,
            stagger: 0.15,
          });

        const ctas = document.querySelectorAll(
          'a[href^="https://getopenlane.io"], a[href^="https://docs.theopenlane.io"]',
        );
        ctas.forEach((cta) => {
          cta.addEventListener("mouseenter", () => {
            gsap.to(cta, { scale: 1.05, duration: 0.3, ease: "power1.out" });
          });
          cta.addEventListener("mouseleave", () => {
            gsap.to(cta, { scale: 1, duration: 0.3, ease: "power1.out" });
          });
        });
      });
    </script>
  </Fragment>
</BaseLayout>
