---
import { ChevronDown, BookText, ChevronRight, Menu } from "@lucide/astro";
import GithubIcon from "../components/icons/GithubIcon.astro";
import DropdownButton from "./DropdownButton.astro";
import MegaMenu from "../layouts/homepage/menu/MegaMenu.astro";
import MobileMenu from "../layouts/homepage/menu/MobileMenu.tsx";
import GitHubStars from "./icons/GithubStars.astro";
const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1);
---

<header class="sticky top-0 z-50 bg-card">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16 items-center">
      <div class="flex items-center space-x-8">
        <a href="/" class="flex items-center space-x-2">
          <img
            src="/logo/openlane-logo-dark.svg"
            alt="Openlane Logo"
            class="h-6 w-auto mr-0 dark:hidden"
          />
          <img
            src="/logo/openlane-logo-light.svg"
            alt="Openlane Logo"
            class="h-6 w-auto hidden dark:block"
          />
        </a>

        <nav class="hidden lg:flex space-x-6 text-sm relative z-50">
          <MegaMenu label="Product" to="product" currentPath={currentPath} />
          <div class="relative group">
            <a
              href="/pricing"
              class=`${currentPath.includes("pricing") ? "text-color-primary" : ""} flex items-center gap-1 text-lg font-medium text-inherit cursor-pointer`
            >
              Pricing
            </a>
          </div>
          <div class="relative group">
            <a
              href="/blog"
              class=`${currentPath.includes("blog") ? "text-color-primary" : ""} flex items-center gap-1 text-lg font-medium text-inherit cursor-pointer`
            >
              Blog
            </a>
          </div>
          <MegaMenu
            label="Resources"
            to="resources"
            currentPath={currentPath}
          />
          <MegaMenu label="Company" to="company" currentPath={currentPath} />
        </nav>
      </div>

      <div class="flex items-center space-x-3">
        <a
          href="https://docs.theopenlane.io/"
          target="_blank"
          class="flex items-center gap-1 text-sm font-medium hidden lg:flex"
        >
          <BookText size={14} />
          Docs
        </a>

        <a
          href="https://github.com/theopenlane"
          target="_blank"
          class="flex items-center gap-1 text-sm font-medium hidden lg:flex"
        >
          <GithubIcon />
          Github
        </a>

        <GitHubStars />

        <a
          href="https://getopenlane.io/"
          target="_blank"
          class="text-sm font-semibold px-4 py-2 rounded-full bg-primary text-invert-primary inline-flex items-center gap-2 whitespace-nowrap hover:bg-brand-300 !transition-colors !duration-300"
        >
          Get Started <ChevronRight size={18} class="hidden lg:flex" />
        </a>

        <MobileMenu client:load />
      </div>
    </div>
  </div>
</header>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { MotionPathPlugin } from "gsap/MotionPathPlugin";
  import { CSSPlugin } from "gsap/CSSPlugin";
  gsap.registerPlugin(ScrollTrigger, MotionPathPlugin, CSSPlugin);
  document.addEventListener("astro:page-load", () => {
    const bubbles = document.querySelectorAll(".bubble");

    const container = document.querySelector(".bubble-container");
    const rect = container?.getBoundingClientRect() || {
      width: 0,
      height: 0,
    };
    const maxY = rect.height * 0.2;
    const maxX = rect.width * 0.05;

    bubbles.forEach((el, i) => {
      const depth = (i % 3) * 60;
      gsap.set(el, { z: depth });

      gsap.fromTo(
        el,
        {
          opacity: 0,
          y: 50 + depth,
          filter: "blur(4px)",
        },
        {
          opacity: 1,
          y: depth,
          filter: "blur(0px)",
          duration: 1.2,
          delay: 0.3 + Math.random() * 0.4,
          ease: "power3.out",
        },
      );

      gsap.to(el, {
        y: `+=${maxY * (1 + depth / 120)}`,
        repeat: -1,
        yoyo: true,
        duration: 4 + Math.random() * 3,
        ease: "sine.inOut",
        modifiers: {
          y: gsap.utils.unitize((y) => {
            const num = parseFloat(y);
            return `${Math.min(Math.max(num, -maxY), maxY)}px`;
          }),
        },
      });

      gsap.to(el, {
        x: `+=${maxX * (1 - depth / 120)}`,
        repeat: -1,
        yoyo: true,
        duration: 6 + Math.random() * 4,
        ease: "sine.inOut",
        modifiers: {
          x: gsap.utils.unitize((x) => {
            const num = parseFloat(x);
            return `${Math.min(Math.max(num, -maxX), maxX)}px`;
          }),
        },
      });
    });

    const canvas = document.createElement("canvas");
    canvas.style.cssText =
      "position:fixed;top:0;left:0;width:100%;height:100%;pointer-events:none;z-index:-1";
    document.body.appendChild(canvas);
    const ctx = canvas.getContext("2d");
    let w,
      h,
      particles = [];

    const onResize = () => {
      w = canvas.width = window.innerWidth;
      h = canvas.height = window.innerHeight;
    };
    window.addEventListener("resize", onResize);
    onResize();

    function initParticles() {
      particles = Array.from({ length: 60 }, () => ({
        x: Math.random() * w,
        y: Math.random() * h,
        r: Math.random() * 2 + 0.5,
        alpha: Math.random() * 0.5 + 0.2,
        vx: (Math.random() - 0.5) * 0.3,
        vy: (Math.random() - 0.5) * 0.3,
      }));
    }
    initParticles();

    function draw() {
      ctx.clearRect(0, 0, w, h);
      particles.forEach((p) => {
        p.x = (p.x + p.vx + w) % w;
        p.y = (p.y + p.vy + h) % h;
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.r, 0, Math.PI * 2);
        ctx.fillStyle = `#2ccbab`;
        ctx.fill();
      });
      requestAnimationFrame(draw);
    }
    draw();
  });
</script>
